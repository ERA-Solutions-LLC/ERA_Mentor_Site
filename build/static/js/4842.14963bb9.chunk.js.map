{"version":3,"file":"static/js/4842.14963bb9.chunk.js","mappings":"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","sources":["../node_modules/@restart/hooks/esm/useCallbackRef.js","../node_modules/@restart/hooks/esm/useEventListener.js","../node_modules/@restart/hooks/esm/useForceUpdate.js","../node_modules/@restart/hooks/esm/useResizeObserver.js","../node_modules/@restart/ui/esm/Anchor.js","../node_modules/@restart/ui/esm/NavContext.js","../node_modules/@restart/ui/node_modules/uncontrollable/lib/esm/index.js","../node_modules/@react-aria/ssr/dist/packages/@react-aria/ssr/src/SSRProvider.tsx"],"sourcesContent":["import { useState } from 'react';\n/**\n * A convenience hook around `useState` designed to be paired with\n * the component [callback ref](https://reactjs.org/docs/refs-and-the-dom.html#callback-refs) api.\n * Callback refs are useful over `useRef()` when you need to respond to the ref being set\n * instead of lazily accessing it in an effect.\n *\n * ```ts\n * const [element, attachRef] = useCallbackRef<HTMLDivElement>()\n *\n * useEffect(() => {\n *   if (!element) return\n *\n *   const calendar = new FullCalendar.Calendar(element)\n *\n *   return () => {\n *     calendar.destroy()\n *   }\n * }, [element])\n *\n * return <div ref={attachRef} />\n * ```\n *\n * @category refs\n */\n\nexport default function useCallbackRef() {\n  return useState(null);\n}","import { useEffect } from 'react';\nimport useEventCallback from './useEventCallback';\n\n/**\n * Attaches an event handler outside directly to specified DOM element\n * bypassing the react synthetic event system.\n *\n * @param element The target to listen for events on\n * @param event The DOM event name\n * @param handler An event handler\n * @param capture Whether or not to listen during the capture event phase\n */\nexport default function useEventListener(eventTarget, event, listener, capture) {\n  if (capture === void 0) {\n    capture = false;\n  }\n\n  var handler = useEventCallback(listener);\n  useEffect(function () {\n    var target = typeof eventTarget === 'function' ? eventTarget() : eventTarget;\n    target.addEventListener(event, handler, capture);\n    return function () {\n      return target.removeEventListener(event, handler, capture);\n    };\n  }, [eventTarget]);\n}","import { useReducer } from 'react';\n/**\n * Returns a function that triggers a component update. the hook equivalent to\n * `this.forceUpdate()` in a class component. In most cases using a state value directly\n * is preferable but may be required in some advanced usages of refs for interop or\n * when direct DOM manipulation is required.\n *\n * ```ts\n * const forceUpdate = useForceUpdate();\n *\n * const updateOnClick = useCallback(() => {\n *  forceUpdate()\n * }, [forceUpdate])\n *\n * return <button type=\"button\" onClick={updateOnClick}>Hi there</button>\n * ```\n */\n\nexport default function useForceUpdate() {\n  // The toggling state value is designed to defeat React optimizations for skipping\n  // updates when they are stricting equal to the last state value\n  var _useReducer = useReducer(function (state) {\n    return !state;\n  }, false),\n      dispatch = _useReducer[1];\n\n  return dispatch;\n}","import { useState } from 'react';\nimport useEffect from './useIsomorphicEffect';\nvar targetMap = new WeakMap();\nvar resizeObserver;\n\nfunction getResizeObserver() {\n  // eslint-disable-next-line no-return-assign\n  return resizeObserver = resizeObserver || new window.ResizeObserver(function (entries) {\n    entries.forEach(function (entry) {\n      var handler = targetMap.get(entry.target);\n      if (handler) handler(entry.contentRect);\n    });\n  });\n}\n/**\n * Efficiently observe size changes on an element. Depends on the `ResizeObserver` api,\n * and polyfills are needed in older browsers.\n *\n * ```ts\n * const [ref, attachRef] = useCallbackRef(null);\n *\n * const rect = useResizeObserver(ref);\n *\n * return (\n *  <div ref={attachRef}>\n *    {JSON.stringify(rect)}\n *  </div>\n * )\n * ```\n *\n * @param element The DOM element to observe\n */\n\n\nexport default function useResizeObserver(element) {\n  var _useState = useState(null),\n      rect = _useState[0],\n      setRect = _useState[1];\n\n  useEffect(function () {\n    if (!element) return;\n    getResizeObserver().observe(element);\n    setRect(element.getBoundingClientRect());\n    targetMap.set(element, function (rect) {\n      setRect(rect);\n    });\n    return function () {\n      targetMap.delete(element);\n    };\n  }, [element]);\n  return rect;\n}","const _excluded = [\"onKeyDown\"];\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/anchor-has-content */\n\nimport * as React from 'react';\nimport { useEventCallback } from '@restart/hooks';\nimport { useButtonProps } from './Button';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function isTrivialHref(href) {\n  return !href || href.trim() === '#';\n}\n/**\n * An generic `<a>` component that covers a few A11y cases, ensuring that\n * cases where the `href` is missing or trivial like \"#\" are treated like buttons.\n */\nconst Anchor = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n      onKeyDown\n    } = _ref,\n    props = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const [buttonProps] = useButtonProps(Object.assign({\n    tagName: 'a'\n  }, props));\n  const handleKeyDown = useEventCallback(e => {\n    buttonProps.onKeyDown(e);\n    onKeyDown == null ? void 0 : onKeyDown(e);\n  });\n  if (isTrivialHref(props.href) || props.role === 'button') {\n    return /*#__PURE__*/_jsx(\"a\", Object.assign({\n      ref: ref\n    }, props, buttonProps, {\n      onKeyDown: handleKeyDown\n    }));\n  }\n  return /*#__PURE__*/_jsx(\"a\", Object.assign({\n    ref: ref\n  }, props, {\n    onKeyDown: onKeyDown\n  }));\n});\nAnchor.displayName = 'Anchor';\nexport default Anchor;","import * as React from 'react';\nconst NavContext = /*#__PURE__*/React.createContext(null);\nNavContext.displayName = 'NavContext';\nexport default NavContext;","function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { useCallback, useRef, useState } from 'react';\nexport function defaultKey(key) {\n  return 'default' + key.charAt(0).toUpperCase() + key.substr(1);\n}\nfunction useUncontrolledProp(propValue, defaultValue, handler) {\n  const wasPropRef = useRef(propValue !== undefined);\n  const [stateValue, setState] = useState(defaultValue);\n  const isProp = propValue !== undefined;\n  const wasProp = wasPropRef.current;\n  wasPropRef.current = isProp;\n\n  /**\n   * If a prop switches from controlled to Uncontrolled\n   * reset its value to the defaultValue\n   */\n  if (!isProp && wasProp && stateValue !== defaultValue) {\n    setState(defaultValue);\n  }\n  return [isProp ? propValue : stateValue, useCallback((value, ...args) => {\n    if (handler) handler(value, ...args);\n    setState(value);\n  }, [handler])];\n}\nexport { useUncontrolledProp };\nexport function useUncontrolled(props, config) {\n  return Object.keys(config).reduce((result, fieldName) => {\n    const _ref = result,\n      _defaultKey = defaultKey(fieldName),\n      {\n        [_defaultKey]: defaultValue,\n        [fieldName]: propsValue\n      } = _ref,\n      rest = _objectWithoutPropertiesLoose(_ref, [_defaultKey, fieldName].map(_toPropertyKey));\n    const handlerName = config[fieldName];\n    const [value, handler] = useUncontrolledProp(propsValue, defaultValue, props[handlerName]);\n    return Object.assign({}, rest, {\n      [fieldName]: value,\n      [handlerName]: handler\n    });\n  }, props);\n}","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// We must avoid a circular dependency with @react-aria/utils, and this useLayoutEffect is\n// guarded by a check that it only runs on the client side.\n// eslint-disable-next-line rulesdir/useLayoutEffectRule\nimport React, {ReactNode, useContext, useLayoutEffect, useMemo, useRef, useState} from 'react';\n\n// To support SSR, the auto incrementing id counter is stored in a context. This allows\n// it to be reset on every request to ensure the client and server are consistent.\n// There is also a prefix string that is used to support async loading components\n// Each async boundary must be wrapped in an SSR provider, which appends to the prefix\n// and resets the current id counter. This ensures that async loaded components have\n// consistent ids regardless of the loading order.\ninterface SSRContextValue {\n  prefix: string,\n  current: number,\n  isSSR: boolean\n}\n\n// Default context value to use in case there is no SSRProvider. This is fine for\n// client-only apps. In order to support multiple copies of React Aria potentially\n// being on the page at once, the prefix is set to a random number. SSRProvider\n// will reset this to zero for consistency between server and client, so in the\n// SSR case multiple copies of React Aria is not supported.\nconst defaultContext: SSRContextValue = {\n  prefix: String(Math.round(Math.random() * 10000000000)),\n  current: 0,\n  isSSR: false\n};\n\nconst SSRContext = React.createContext<SSRContextValue>(defaultContext);\n\nexport interface SSRProviderProps {\n  /** Your application here. */\n  children: ReactNode\n}\n\n/**\n * When using SSR with React Aria, applications must be wrapped in an SSRProvider.\n * This ensures that auto generated ids are consistent between the client and server.\n */\nexport function SSRProvider(props: SSRProviderProps): JSX.Element {\n  let cur = useContext(SSRContext);\n  let counter = useCounter(cur === defaultContext);\n  let [isSSR, setIsSSR] = useState(true);\n  let value: SSRContextValue = useMemo(() => ({\n    // If this is the first SSRProvider, start with an empty string prefix, otherwise\n    // append and increment the counter.\n    prefix: cur === defaultContext ? '' : `${cur.prefix}-${counter}`,\n    current: 0,\n    isSSR\n  }), [cur, counter, isSSR]);\n\n  // If on the client, and the component was initially server rendered,\n  // then schedule a layout effect to update the component after hydration.\n  if (typeof window !== 'undefined') {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useLayoutEffect(() => {\n      setIsSSR(false);\n    }, []);\n  }\n\n  return (\n    <SSRContext.Provider value={value}>\n      {props.children}\n    </SSRContext.Provider>\n  );\n}\n\nlet canUseDOM = Boolean(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\nlet componentIds = new WeakMap();\n\nfunction useCounter(isDisabled = false) {\n  let ctx = useContext(SSRContext);\n  let ref = useRef<number | null>(null);\n  if (ref.current === null && !isDisabled) {\n    // In strict mode, React renders components twice, and the ref will be reset to null on the second render.\n    // This means our id counter will be incremented twice instead of once. This is a problem because on the\n    // server, components are only rendered once and so ids generated on the server won't match the client.\n    // In React 18, useId was introduced to solve this, but it is not available in older versions. So to solve this\n    // we need to use some React internals to access the underlying Fiber instance, which is stable between renders.\n    // This is exposed as ReactCurrentOwner in development, which is all we need since StrictMode only runs in development.\n    // To ensure that we only increment the global counter once, we store the starting id for this component in\n    // a weak map associated with the Fiber. On the second render, we reset the global counter to this value.\n    // Since React runs the second render immediately after the first, this is safe.\n    // @ts-ignore\n    let currentOwner = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED?.ReactCurrentOwner?.current;\n    if (currentOwner) {\n      let prevComponentValue = componentIds.get(currentOwner);\n      if (prevComponentValue == null) {\n        // On the first render, and first call to useId, store the id and state in our weak map.\n        componentIds.set(currentOwner, {\n          id: ctx.current,\n          state: currentOwner.memoizedState\n        });\n      } else if (currentOwner.memoizedState !== prevComponentValue.state) {\n        // On the second render, the memoizedState gets reset by React.\n        // Reset the counter, and remove from the weak map so we don't\n        // do this for subsequent useId calls.\n        ctx.current = prevComponentValue.id;\n        componentIds.delete(currentOwner);\n      }\n    }\n\n    ref.current = ++ctx.current;\n  }\n\n  return ref.current;\n}\n\n/** @private */\nexport function useSSRSafeId(defaultId?: string): string {\n  let ctx = useContext(SSRContext);\n\n  // If we are rendering in a non-DOM environment, and there's no SSRProvider,\n  // provide a warning to hint to the developer to add one.\n  if (ctx === defaultContext && !canUseDOM) {\n    console.warn('When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.');\n  }\n\n  let counter = useCounter(!!defaultId);\n  return defaultId || `react-aria${ctx.prefix}-${counter}`;\n}\n\n/**\n * Returns whether the component is currently being server side rendered or\n * hydrated on the client. Can be used to delay browser-specific rendering\n * until after hydration.\n */\nexport function useIsSSR(): boolean {\n  let cur = useContext(SSRContext);\n  return cur.isSSR;\n}\n"],"names":["useCallbackRef","useState","useEventListener","eventTarget","event","listener","capture","handler","useEventCallback","useEffect","target","addEventListener","removeEventListener","useForceUpdate","useReducer","state","WeakMap","_excluded","Anchor","React","_ref","ref","href","onKeyDown","props","source","excluded","key","i","sourceKeys","Object","keys","length","indexOf","_objectWithoutPropertiesLoose","_useButtonProps","useButtonProps","assign","tagName","buttonProps","_slicedToArray","handleKeyDown","e","trim","role","_jsx","displayName","NavContext","useUncontrolledProp","propValue","defaultValue","wasPropRef","useRef","undefined","_useState","_useState2","stateValue","setState","isProp","wasProp","current","useCallback","value","_len","arguments","args","Array","_key","apply","concat","$704cf1d3b684cc5c$var$defaultContext","prefix","String","Math","round","random","isSSR","$704cf1d3b684cc5c$var$SSRContext","$89yE2$react","createContext","$704cf1d3b684cc5c$var$canUseDOM","Boolean","window","document","createElement","$704cf1d3b684cc5c$var$componentIds","$704cf1d3b684cc5c$var$useCounter","isDisabled","ctx","$89yE2$useContext","$89yE2$useRef","_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner","currentOwner","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","prevComponentValue","get","set","id","memoizedState","delete","$704cf1d3b684cc5c$export$619500959fc48b26","defaultId","console","warn","counter"],"sourceRoot":""}